
/home/tibrahimovic/projects/wireguard-fpga/3.build/sw_build/main.elf:     file format elf32-littleriscv


Disassembly of section .text:

00000000 <_boot_crt>:

#--COMMON: Copy 'Initialized Data' section from Flash.
#  Note that '_text_end' as source address to copy from is just
#  an example, and assumes that the Initialized Data starts right
#  after Code. This may not be correct source address in your case
la   a0, _idata_start  
   0:	00000517          	auipc	a0,0x0
   4:	74c50513          	addi	a0,a0,1868 # 74c <_idata_start>
la   a1, _data_start
   8:	10000597          	auipc	a1,0x10000
   c:	ff858593          	addi	a1,a1,-8 # 10000000 <Arr_1_Glob>
la   a2, _data_end
  10:	10000617          	auipc	a2,0x10000
  14:	ff060613          	addi	a2,a2,-16 # 10000000 <Arr_1_Glob>
bge  a1, a2, end_copy_idata
  18:	00c5dc63          	bge	a1,a2,30 <end_copy_idata>

0000001c <loop_copy_idata>:
    
loop_copy_idata:
lw   a3, 0(a0)
  1c:	00052683          	lw	a3,0(a0)
sw   a3, 0(a1)
  20:	00d5a023          	sw	a3,0(a1)
addi a0, a0, 4
  24:	00450513          	addi	a0,a0,4
addi a1, a1, 4
  28:	00458593          	addi	a1,a1,4
blt  a1, a2, loop_copy_idata
  2c:	fec5c8e3          	blt	a1,a2,1c <loop_copy_idata>

00000030 <end_copy_idata>:
 
end_copy_idata:
	
    
#--COMMON: Initialize 'BSS' section with all zeros
la   a0, _bss_start
  30:	10000517          	auipc	a0,0x10000
  34:	fd050513          	addi	a0,a0,-48 # 10000000 <Arr_1_Glob>
la   a1, _bss_end
  38:	10002597          	auipc	a1,0x10002
  3c:	7cc58593          	addi	a1,a1,1996 # 10002804 <_bss_end>
bge  a0, a1, end_clear_bss
  40:	00b55863          	bge	a0,a1,50 <end_clear_bss>

00000044 <loop_clear_bss>:
 
loop_clear_bss:
sw   zero, 0(a0)
  44:	00052023          	sw	zero,0(a0)
addi a0, a0, 4
  48:	00450513          	addi	a0,a0,4
blt  a0, a1, loop_clear_bss
  4c:	feb54ce3          	blt	a0,a1,44 <loop_clear_bss>

00000050 <end_clear_bss>:
#--COMMON: Initialize SP and registers needed for 'C'. Then
#          enter 'main' function and loop forever when done
.option  push
.option  norelax
	
la   sp, _stack_start	     
  50:	10008117          	auipc	sp,0x10008
  54:	fb010113          	addi	sp,sp,-80 # 10008000 <_stack_start>
la   gp, __global_pointer$
  58:	10000197          	auipc	gp,0x10000
  5c:	7a818193          	addi	gp,gp,1960 # 10000800 <__global_pointer$>
     
xor  a0, a0, a0 /* argc = 0 */
  60:	00a54533          	xor	a0,a0,a0
xor  a1, a1, a1 /* argv = 0 */
  64:	00b5c5b3          	xor	a1,a1,a1
xor  a2, a2, a2 /* envp = 0 */
  68:	00c64633          	xor	a2,a2,a2
.option pop    
	
#ifdef TESTCODE
   call start_test
#else
   call main
  6c:	304000ef          	jal	370 <main>

00000070 <loop_forever>:
#endif
loop_forever: j loop_forever
  70:	0000006f          	j	70 <loop_forever>

00000074 <memcpy>:
/**********************************************************************
 * Relevant parts of STDLIB which, due to bare-metal nature of this
 *  project, have to be provided separately
 **********************************************************************/
void *memcpy (void *dest, void *src, uint32_t n) {
   for (uint32_t i = 0; i < n; i++) {
  74:	00060e63          	beqz	a2,90 <memcpy+0x1c>
  78:	00c58633          	add	a2,a1,a2
      ((char*)dest)[i] = ((char*)src)[i];
  7c:	0005c783          	lbu	a5,0(a1)
   for (uint32_t i = 0; i < n; i++) {
  80:	00158593          	addi	a1,a1,1
  84:	00150513          	addi	a0,a0,1
      ((char*)dest)[i] = ((char*)src)[i];
  88:	fef50fa3          	sb	a5,-1(a0)
   for (uint32_t i = 0; i < n; i++) {
  8c:	fec598e3          	bne	a1,a2,7c <memcpy+0x8>
   }
}
  90:	00008067          	ret

00000094 <strcmp>:

/**********************************************************************
 * Description: Compares two strings. Returns 0 if strings are equal
 **********************************************************************/
int strcmp(const char *s1, const char *s2) {
   while ((*s1 == *s2) && *s1) { ++s1; ++s2; }
  94:	00054783          	lbu	a5,0(a0)
  98:	0005c703          	lbu	a4,0(a1)
  9c:	00e79863          	bne	a5,a4,ac <strcmp+0x18>
  a0:	00150513          	addi	a0,a0,1
  a4:	00158593          	addi	a1,a1,1
  a8:	fe0796e3          	bnez	a5,94 <strcmp>
   return ((int)(unsigned char) *s1) - ((int)(unsigned char) *s2);
}
  ac:	40e78533          	sub	a0,a5,a4
  b0:	00008067          	ret

000000b4 <mul3>:
/**********************************************************************
 * Description: Multiplies input by 3
 **********************************************************************/
uint32_t mul3 (uint32_t i) {
   uint32_t m;
   m = i << 2; //x4
  b4:	00251793          	slli	a5,a0,0x2
   m = m - i;  //-1 = x3
   return m;
}
  b8:	40a78533          	sub	a0,a5,a0
  bc:	00008067          	ret

000000c0 <uart_send_char>:
 *
 * Returns:     None
 **********************************************************************/
void uart_send_char (char c) {
   // wait for HW "not busy", then send the byte/character
   while (CSR -> uart_tx.fld.busy); 
  c0:	20000737          	lui	a4,0x20000
  c4:	00072783          	lw	a5,0(a4) # 20000000 <_stack_start+0xfff8000>
  c8:	fe07cee3          	bltz	a5,c4 <uart_send_char+0x4>
   CSR -> uart_tx.fld.data = c;
  cc:	00a70023          	sb	a0,0(a4)
}
  d0:	00008067          	ret

000000d4 <uart_send_hex>:
 *              and sends them to UART
 *
 * Returns:     None
 **********************************************************************/
void uart_send_hex (unsigned int val, int digits) {
   for (int i = (4*digits) - 4; i >= 0; i -= 4)
  d4:	fff58693          	addi	a3,a1,-1
  d8:	00269693          	slli	a3,a3,0x2
  dc:	0206c863          	bltz	a3,10c <uart_send_hex+0x38>
  e0:	6b000593          	li	a1,1712
   while (CSR -> uart_tx.fld.busy); 
  e4:	20000737          	lui	a4,0x20000
      uart_send_char("0123456789ABCDEF"[(val >> i) % 16]);
  e8:	00d557b3          	srl	a5,a0,a3
  ec:	00f7f793          	andi	a5,a5,15
  f0:	00f587b3          	add	a5,a1,a5
  f4:	0007c603          	lbu	a2,0(a5)
   while (CSR -> uart_tx.fld.busy); 
  f8:	00072783          	lw	a5,0(a4) # 20000000 <_stack_start+0xfff8000>
  fc:	fe07cee3          	bltz	a5,f8 <uart_send_hex+0x24>
   CSR -> uart_tx.fld.data = c;
 100:	00c70023          	sb	a2,0(a4)
   for (int i = (4*digits) - 4; i >= 0; i -= 4)
 104:	ffc68693          	addi	a3,a3,-4
 108:	fe06d0e3          	bgez	a3,e8 <uart_send_hex+0x14>
}
 10c:	00008067          	ret

00000110 <uart_send>:
 * Description: Sends a string of characters to UART
 *
 * Returns:     None
 **********************************************************************/
void uart_send (const char *s) {
   while (*s) uart_send_char(*(s++));
 110:	00054683          	lbu	a3,0(a0)
 114:	02068063          	beqz	a3,134 <uart_send+0x24>
   while (CSR -> uart_tx.fld.busy); 
 118:	20000737          	lui	a4,0x20000
   while (*s) uart_send_char(*(s++));
 11c:	00150513          	addi	a0,a0,1
   while (CSR -> uart_tx.fld.busy); 
 120:	00072783          	lw	a5,0(a4) # 20000000 <_stack_start+0xfff8000>
 124:	fe07cee3          	bltz	a5,120 <uart_send+0x10>
   CSR -> uart_tx.fld.data = c;
 128:	00d70023          	sb	a3,0(a4)
   while (*s) uart_send_char(*(s++));
 12c:	00054683          	lbu	a3,0(a0)
 130:	fe0696e3          	bnez	a3,11c <uart_send+0xc>
}
 134:	00008067          	ret

00000138 <strcpy>:

/* end of variables for time measurement */

char* strcpy(char* dest, const char* src) {
    char* original_dest = dest;
    while ((*dest++ = *src++) != '\0');
 138:	00050793          	mv	a5,a0
 13c:	0005c703          	lbu	a4,0(a1)
 140:	00158593          	addi	a1,a1,1
 144:	00178793          	addi	a5,a5,1
 148:	fee78fa3          	sb	a4,-1(a5)
 14c:	fe0718e3          	bnez	a4,13c <strcpy+0x4>
    return original_dest;
}
 150:	00008067          	ret

00000154 <Proc_1>:
Proc_1 (Ptr_Val_Par)
/******************/

REG Rec_Pointer Ptr_Val_Par;
    /* executed once */
{
 154:	ff010113          	addi	sp,sp,-16
 158:	01212023          	sw	s2,0(sp)
  REG Rec_Pointer Next_Record = Ptr_Val_Par->Ptr_Comp;  
                                        /* == Ptr_Glob_Next */
  /* Local variable, initialized with Ptr_Val_Par->Ptr_Comp,    */
  /* corresponds to "rename" in Ada, "with" in Pascal           */
  
  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob); 
 15c:	10003937          	lui	s2,0x10003
 160:	80092783          	lw	a5,-2048(s2) # 10002800 <Ptr_Glob>
{
 164:	00812423          	sw	s0,8(sp)
  REG Rec_Pointer Next_Record = Ptr_Val_Par->Ptr_Comp;  
 168:	00052403          	lw	s0,0(a0)
  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob); 
 16c:	0007a683          	lw	a3,0(a5)
 170:	0047af03          	lw	t5,4(a5)
 174:	0087ae83          	lw	t4,8(a5)
 178:	0107ae03          	lw	t3,16(a5)
 17c:	0147a303          	lw	t1,20(a5)
 180:	0187a883          	lw	a7,24(a5)
 184:	01c7a803          	lw	a6,28(a5)
 188:	0247a583          	lw	a1,36(a5)
 18c:	0287a603          	lw	a2,40(a5)
 190:	02c7a703          	lw	a4,44(a5)
{
 194:	00112623          	sw	ra,12(sp)
 198:	00912223          	sw	s1,4(sp)
 19c:	00050493          	mv	s1,a0
  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob); 
 1a0:	0207a503          	lw	a0,32(a5)
 1a4:	00d42023          	sw	a3,0(s0)
  Ptr_Val_Par->variant.var_1.Int_Comp = 5;
  Next_Record->variant.var_1.Int_Comp 
        = Ptr_Val_Par->variant.var_1.Int_Comp;
  Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
 1a8:	0004a683          	lw	a3,0(s1)
  structassign (*Ptr_Val_Par->Ptr_Comp, *Ptr_Glob); 
 1ac:	01e42223          	sw	t5,4(s0)
 1b0:	01d42423          	sw	t4,8(s0)
 1b4:	01c42823          	sw	t3,16(s0)
 1b8:	00642a23          	sw	t1,20(s0)
 1bc:	01142c23          	sw	a7,24(s0)
 1c0:	01042e23          	sw	a6,28(s0)
 1c4:	02a42023          	sw	a0,32(s0)
 1c8:	02b42223          	sw	a1,36(s0)
 1cc:	02c42423          	sw	a2,40(s0)
 1d0:	02e42623          	sw	a4,44(s0)
  Ptr_Val_Par->variant.var_1.Int_Comp = 5;
 1d4:	00500713          	li	a4,5
 1d8:	00e4a623          	sw	a4,12(s1)
  Next_Record->Ptr_Comp = Ptr_Val_Par->Ptr_Comp;
 1dc:	00d42023          	sw	a3,0(s0)
Rec_Pointer *Ptr_Ref_Par;

{
  if (Ptr_Glob != Null)
    /* then, executed */
    *Ptr_Ref_Par = Ptr_Glob->Ptr_Comp;
 1e0:	0007a783          	lw	a5,0(a5)
  Proc_7 (10, Int_Glob, &Ptr_Glob->variant.var_1.Int_Comp);
 1e4:	100026b7          	lui	a3,0x10002
 1e8:	7f86a583          	lw	a1,2040(a3) # 100027f8 <Int_Glob>
    *Ptr_Ref_Par = Ptr_Glob->Ptr_Comp;
 1ec:	00f42023          	sw	a5,0(s0)
  Proc_7 (10, Int_Glob, &Ptr_Glob->variant.var_1.Int_Comp);
 1f0:	80092603          	lw	a2,-2048(s2)
        = Ptr_Val_Par->variant.var_1.Int_Comp;
 1f4:	00e42623          	sw	a4,12(s0)
  Proc_7 (10, Int_Glob, &Ptr_Glob->variant.var_1.Int_Comp);
 1f8:	00a00513          	li	a0,10
 1fc:	00c60613          	addi	a2,a2,12
 200:	3bc000ef          	jal	5bc <Proc_7>
  if (Next_Record->Discr == Ident_1)
 204:	00442783          	lw	a5,4(s0)
 208:	08078063          	beqz	a5,288 <_STACK_SIZE+0x88>
    structassign (*Ptr_Val_Par, *Ptr_Val_Par->Ptr_Comp);
 20c:	0004a783          	lw	a5,0(s1)
} /* Proc_1 */
 210:	00c12083          	lw	ra,12(sp)
 214:	00812403          	lw	s0,8(sp)
    structassign (*Ptr_Val_Par, *Ptr_Val_Par->Ptr_Comp);
 218:	0007af83          	lw	t6,0(a5)
 21c:	0047af03          	lw	t5,4(a5)
 220:	0087ae83          	lw	t4,8(a5)
 224:	00c7ae03          	lw	t3,12(a5)
 228:	0107a303          	lw	t1,16(a5)
 22c:	0147a883          	lw	a7,20(a5)
 230:	0187a803          	lw	a6,24(a5)
 234:	01c7a583          	lw	a1,28(a5)
 238:	0207a603          	lw	a2,32(a5)
 23c:	0247a683          	lw	a3,36(a5)
 240:	0287a703          	lw	a4,40(a5)
 244:	02c7a783          	lw	a5,44(a5)
 248:	01f4a023          	sw	t6,0(s1)
 24c:	01e4a223          	sw	t5,4(s1)
 250:	01d4a423          	sw	t4,8(s1)
 254:	01c4a623          	sw	t3,12(s1)
 258:	0064a823          	sw	t1,16(s1)
 25c:	0114aa23          	sw	a7,20(s1)
 260:	0104ac23          	sw	a6,24(s1)
 264:	00b4ae23          	sw	a1,28(s1)
 268:	02c4a023          	sw	a2,32(s1)
 26c:	02d4a223          	sw	a3,36(s1)
 270:	02e4a423          	sw	a4,40(s1)
 274:	02f4a623          	sw	a5,44(s1)
} /* Proc_1 */
 278:	00012903          	lw	s2,0(sp)
 27c:	00412483          	lw	s1,4(sp)
 280:	01010113          	addi	sp,sp,16
 284:	00008067          	ret
    Proc_6 (Ptr_Val_Par->variant.var_1.Enum_Comp, 
 288:	0084a503          	lw	a0,8(s1)
    Next_Record->variant.var_1.Int_Comp = 6;
 28c:	00600793          	li	a5,6
 290:	00f42623          	sw	a5,12(s0)
    Proc_6 (Ptr_Val_Par->variant.var_1.Enum_Comp, 
 294:	00840593          	addi	a1,s0,8
 298:	2d0000ef          	jal	568 <Proc_6>
    Next_Record->Ptr_Comp = Ptr_Glob->Ptr_Comp;
 29c:	80092783          	lw	a5,-2048(s2)
    Proc_7 (Next_Record->variant.var_1.Int_Comp, 10, 
 2a0:	00c42503          	lw	a0,12(s0)
 2a4:	00c40613          	addi	a2,s0,12
    Next_Record->Ptr_Comp = Ptr_Glob->Ptr_Comp;
 2a8:	0007a783          	lw	a5,0(a5)
} /* Proc_1 */
 2ac:	00c12083          	lw	ra,12(sp)
 2b0:	00412483          	lw	s1,4(sp)
    Next_Record->Ptr_Comp = Ptr_Glob->Ptr_Comp;
 2b4:	00f42023          	sw	a5,0(s0)
} /* Proc_1 */
 2b8:	00812403          	lw	s0,8(sp)
 2bc:	00012903          	lw	s2,0(sp)
    Proc_7 (Next_Record->variant.var_1.Int_Comp, 10, 
 2c0:	00a00593          	li	a1,10
} /* Proc_1 */
 2c4:	01010113          	addi	sp,sp,16
    Proc_7 (Next_Record->variant.var_1.Int_Comp, 10, 
 2c8:	2f40006f          	j	5bc <Proc_7>

000002cc <Proc_2>:
    if (Ch_1_Glob == 'A')
 2cc:	100027b7          	lui	a5,0x10002
 2d0:	7f17c703          	lbu	a4,2033(a5) # 100027f1 <Ch_1_Glob>
 2d4:	04100793          	li	a5,65
 2d8:	00f70463          	beq	a4,a5,2e0 <Proc_2+0x14>
} /* Proc_2 */
 2dc:	00008067          	ret
      Int_Loc -= 1;
 2e0:	00052783          	lw	a5,0(a0)
      *Int_Par_Ref = Int_Loc - Int_Glob;
 2e4:	10002737          	lui	a4,0x10002
 2e8:	7f872703          	lw	a4,2040(a4) # 100027f8 <Int_Glob>
      Int_Loc -= 1;
 2ec:	00978793          	addi	a5,a5,9
      *Int_Par_Ref = Int_Loc - Int_Glob;
 2f0:	40e787b3          	sub	a5,a5,a4
 2f4:	00f52023          	sw	a5,0(a0)
} /* Proc_2 */
 2f8:	00008067          	ret

000002fc <Proc_3>:
  if (Ptr_Glob != Null)
 2fc:	100037b7          	lui	a5,0x10003
 300:	8007a603          	lw	a2,-2048(a5) # 10002800 <Ptr_Glob>
 304:	00060863          	beqz	a2,314 <Proc_3+0x18>
    *Ptr_Ref_Par = Ptr_Glob->Ptr_Comp;
 308:	00062703          	lw	a4,0(a2)
 30c:	00e52023          	sw	a4,0(a0)
  Proc_7 (10, Int_Glob, &Ptr_Glob->variant.var_1.Int_Comp);
 310:	8007a603          	lw	a2,-2048(a5)
 314:	100027b7          	lui	a5,0x10002
 318:	7f87a583          	lw	a1,2040(a5) # 100027f8 <Int_Glob>
 31c:	00c60613          	addi	a2,a2,12
 320:	00a00513          	li	a0,10
 324:	2980006f          	j	5bc <Proc_7>

00000328 <Proc_4>:
/*******/
    /* executed once */
{
  Boolean Bool_Loc;

  Bool_Loc = Ch_1_Glob == 'A';
 328:	100027b7          	lui	a5,0x10002
 32c:	7f17c783          	lbu	a5,2033(a5) # 100027f1 <Ch_1_Glob>
  Bool_Glob = Bool_Loc | Bool_Glob;
 330:	10002737          	lui	a4,0x10002
 334:	7f472683          	lw	a3,2036(a4) # 100027f4 <Bool_Glob>
  Bool_Loc = Ch_1_Glob == 'A';
 338:	fbf78793          	addi	a5,a5,-65
 33c:	0017b793          	seqz	a5,a5
  Bool_Glob = Bool_Loc | Bool_Glob;
 340:	00d7e7b3          	or	a5,a5,a3
  Ch_2_Glob = 'B';
 344:	04200613          	li	a2,66
 348:	100026b7          	lui	a3,0x10002
  Bool_Glob = Bool_Loc | Bool_Glob;
 34c:	7ef72a23          	sw	a5,2036(a4)
  Ch_2_Glob = 'B';
 350:	7ec68823          	sb	a2,2032(a3) # 100027f0 <Ch_2_Glob>
} /* Proc_4 */
 354:	00008067          	ret

00000358 <Proc_5>:

Proc_5 () /* without parameters */
/*******/
    /* executed once */
{
  Ch_1_Glob = 'A';
 358:	10002737          	lui	a4,0x10002
 35c:	04100693          	li	a3,65
  Bool_Glob = false;
 360:	100027b7          	lui	a5,0x10002
  Ch_1_Glob = 'A';
 364:	7ed708a3          	sb	a3,2033(a4) # 100027f1 <Ch_1_Glob>
  Bool_Glob = false;
 368:	7e07aa23          	sw	zero,2036(a5) # 100027f4 <Bool_Glob>
} /* Proc_5 */
 36c:	00008067          	ret

00000370 <main>:
{
 370:	f1010113          	addi	sp,sp,-240
  Ptr_Glob->variant.var_1.Int_Comp      = 40;
 374:	02800713          	li	a4,40
  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
 378:	05010613          	addi	a2,sp,80
  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
 37c:	00200693          	li	a3,2
  Ptr_Glob->variant.var_1.Int_Comp      = 40;
 380:	08e12623          	sw	a4,140(sp)
{
 384:	0e112623          	sw	ra,236(sp)
 388:	0e812423          	sw	s0,232(sp)
 38c:	0e912223          	sw	s1,228(sp)
 390:	0f212023          	sw	s2,224(sp)
 394:	0d312e23          	sw	s3,220(sp)
 398:	0d412c23          	sw	s4,216(sp)
 39c:	0d512a23          	sw	s5,212(sp)
 3a0:	0d612823          	sw	s6,208(sp)
 3a4:	0d712623          	sw	s7,204(sp)
 3a8:	0d812423          	sw	s8,200(sp)
 3ac:	0d912223          	sw	s9,196(sp)
 3b0:	0da12023          	sw	s10,192(sp)
 3b4:	0bb12e23          	sw	s11,188(sp)
  Ptr_Glob->Discr                       = Ident_1;
 3b8:	08012223          	sw	zero,132(sp)
  Ptr_Glob->Ptr_Comp                    = Next_Ptr_Glob;
 3bc:	08c12023          	sw	a2,128(sp)
  Ptr_Glob->variant.var_1.Enum_Comp     = Ident_3;
 3c0:	08d12423          	sw	a3,136(sp)
    while ((*dest++ = *src++) != '\0');
 3c4:	6c400793          	li	a5,1732
 3c8:	09010713          	addi	a4,sp,144
 3cc:	0007c683          	lbu	a3,0(a5)
 3d0:	00178793          	addi	a5,a5,1
 3d4:	00170713          	addi	a4,a4,1
 3d8:	fed70fa3          	sb	a3,-1(a4)
 3dc:	fe0698e3          	bnez	a3,3cc <main+0x5c>
 3e0:	6e400793          	li	a5,1764
 3e4:	01010713          	addi	a4,sp,16
 3e8:	0007c683          	lbu	a3,0(a5)
 3ec:	00178793          	addi	a5,a5,1
 3f0:	00170713          	addi	a4,a4,1
 3f4:	fed70fa3          	sb	a3,-1(a4)
 3f8:	fe0698e3          	bnez	a3,3e8 <main+0x78>
  Arr_2_Glob [8][7] = 10;
 3fc:	10000ab7          	lui	s5,0x10000
 400:	0c8a8793          	addi	a5,s5,200 # 100000c8 <Arr_2_Glob>
 404:	00a00713          	li	a4,10
  uart_send("s"); //added
 408:	74400513          	li	a0,1860
  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
 40c:	00100493          	li	s1,1
  Arr_2_Glob [8][7] = 10;
 410:	64e7ae23          	sw	a4,1628(a5)
  Bool_Glob = Bool_Loc | Bool_Glob;
 414:	00048993          	mv	s3,s1
  uart_send("s"); //added
 418:	cf9ff0ef          	jal	110 <uart_send>
  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
 41c:	70400a13          	li	s4,1796
 420:	10002db7          	lui	s11,0x10002
 424:	10002937          	lui	s2,0x10002
 428:	10002437          	lui	s0,0x10002
 42c:	10000d37          	lui	s10,0x10000
  Ch_1_Glob = 'A';
 430:	04100c93          	li	s9,65
  Ch_2_Glob = 'B';
 434:	04200c13          	li	s8,66
      Int_3_Loc = 5 * Int_1_Loc - Int_2_Loc;
 438:	00700b93          	li	s7,7
  Ch_1_Glob = 'A';
 43c:	7f9d88a3          	sb	s9,2033(s11) # 100027f1 <Ch_1_Glob>
  Bool_Glob = Bool_Loc | Bool_Glob;
 440:	7f392a23          	sw	s3,2036(s2) # 100027f4 <Bool_Glob>
  Ch_2_Glob = 'B';
 444:	7f840823          	sb	s8,2032(s0) # 100027f0 <Ch_2_Glob>
 448:	000a0713          	mv	a4,s4
 44c:	03010793          	addi	a5,sp,48
    while ((*dest++ = *src++) != '\0');
 450:	00074683          	lbu	a3,0(a4)
 454:	00170713          	addi	a4,a4,1
 458:	00178793          	addi	a5,a5,1
 45c:	fed78fa3          	sb	a3,-1(a5)
 460:	fe0698e3          	bnez	a3,450 <_HEAP_SIZE+0x50>
    Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
 464:	03010593          	addi	a1,sp,48
 468:	01010513          	addi	a0,sp,16
    Enum_Loc = Ident_2;
 46c:	01312623          	sw	s3,12(sp)
    Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
 470:	1f4000ef          	jal	664 <Func_2>
 474:	00153793          	seqz	a5,a0
      Proc_7 (Int_1_Loc, Int_2_Loc, &Int_3_Loc);
 478:	00810613          	addi	a2,sp,8
 47c:	00300593          	li	a1,3
 480:	00200513          	li	a0,2
    Bool_Glob = ! Func_2 (Str_1_Loc, Str_2_Loc);
 484:	7ef92a23          	sw	a5,2036(s2)
      Int_3_Loc = 5 * Int_1_Loc - Int_2_Loc;
 488:	01712423          	sw	s7,8(sp)
      Proc_7 (Int_1_Loc, Int_2_Loc, &Int_3_Loc);
 48c:	130000ef          	jal	5bc <Proc_7>
    Proc_8 (Arr_1_Glob, Arr_2_Glob, Int_1_Loc, Int_3_Loc);
 490:	00812683          	lw	a3,8(sp)
 494:	0c8a8593          	addi	a1,s5,200
 498:	00300613          	li	a2,3
 49c:	000d0513          	mv	a0,s10
 4a0:	12c000ef          	jal	5cc <Proc_8>
    Proc_1 (Ptr_Glob);
 4a4:	08010513          	addi	a0,sp,128
 4a8:	cadff0ef          	jal	154 <Proc_1>
    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
 4ac:	7f044783          	lbu	a5,2032(s0)
 4b0:	04000713          	li	a4,64
 4b4:	02f77663          	bgeu	a4,a5,4e0 <_HEAP_SIZE+0xe0>
 4b8:	04100b13          	li	s6,65
      if (Enum_Loc == Func_1 (Ch_Index, 'C'))
 4bc:	04300593          	li	a1,67
 4c0:	000b0513          	mv	a0,s6
 4c4:	17c000ef          	jal	640 <Func_1>
 4c8:	00c12703          	lw	a4,12(sp)
 4cc:	06e50463          	beq	a0,a4,534 <_HEAP_SIZE+0x134>
    for (Ch_Index = 'A'; Ch_Index <= Ch_2_Glob; ++Ch_Index)
 4d0:	7f044703          	lbu	a4,2032(s0)
 4d4:	001b0793          	addi	a5,s6,1
 4d8:	0ff7fb13          	zext.b	s6,a5
 4dc:	ff6770e3          	bgeu	a4,s6,4bc <_HEAP_SIZE+0xbc>
  for (Run_Index = 1; Run_Index <= Number_Of_Runs; ++Run_Index)
 4e0:	00148493          	addi	s1,s1,1
 4e4:	00b00793          	li	a5,11
 4e8:	f4f49ae3          	bne	s1,a5,43c <_HEAP_SIZE+0x3c>
  uart_send("e");
 4ec:	74800513          	li	a0,1864
 4f0:	c21ff0ef          	jal	110 <uart_send>
}
 4f4:	0ec12083          	lw	ra,236(sp)
 4f8:	0e812403          	lw	s0,232(sp)
 4fc:	0e412483          	lw	s1,228(sp)
 500:	0e012903          	lw	s2,224(sp)
 504:	0dc12983          	lw	s3,220(sp)
 508:	0d812a03          	lw	s4,216(sp)
 50c:	0d412a83          	lw	s5,212(sp)
 510:	0d012b03          	lw	s6,208(sp)
 514:	0cc12b83          	lw	s7,204(sp)
 518:	0c812c03          	lw	s8,200(sp)
 51c:	0c412c83          	lw	s9,196(sp)
 520:	0c012d03          	lw	s10,192(sp)
 524:	0bc12d83          	lw	s11,188(sp)
 528:	00000513          	li	a0,0
 52c:	0f010113          	addi	sp,sp,240
 530:	00008067          	ret
        Proc_6 (Ident_1, &Enum_Loc);
 534:	00c10593          	addi	a1,sp,12
 538:	00000513          	li	a0,0
 53c:	02c000ef          	jal	568 <Proc_6>
    while ((*dest++ = *src++) != '\0');
 540:	03010693          	addi	a3,sp,48
 544:	72400713          	li	a4,1828
 548:	00074603          	lbu	a2,0(a4)
 54c:	00170713          	addi	a4,a4,1
 550:	00168693          	addi	a3,a3,1
 554:	fec68fa3          	sb	a2,-1(a3)
 558:	fe0618e3          	bnez	a2,548 <_HEAP_SIZE+0x148>
        Int_Glob = Run_Index;
 55c:	10002737          	lui	a4,0x10002
 560:	7e972c23          	sw	s1,2040(a4) # 100027f8 <Int_Glob>
 564:	f6dff06f          	j	4d0 <_HEAP_SIZE+0xd0>

00000568 <Proc_6>:
Enumeration Enum_Par_Val;
{
  Enumeration Enum_Loc;

  Enum_Loc = Enum_Par_Val;
  if (Enum_Loc == Ident_3)
 568:	00200793          	li	a5,2
 56c:	02f50e63          	beq	a0,a5,5a8 <Proc_6+0x40>
    *Enum_Ref_Par = Ident_4;
 570:	00300713          	li	a4,3
 574:	00e5a023          	sw	a4,0(a1)
  switch (Enum_Val_Par)
 578:	00100713          	li	a4,1
 57c:	00e50a63          	beq	a0,a4,590 <Proc_6+0x28>
 580:	00400713          	li	a4,4
 584:	02e50863          	beq	a0,a4,5b4 <Proc_6+0x4c>
 588:	00050c63          	beqz	a0,5a0 <Proc_6+0x38>
} /* Proc_6 */
 58c:	00008067          	ret
      if (Int_Glob > 100)
 590:	100027b7          	lui	a5,0x10002
 594:	7f87a703          	lw	a4,2040(a5) # 100027f8 <Int_Glob>
 598:	06400793          	li	a5,100
 59c:	fee7d8e3          	bge	a5,a4,58c <Proc_6+0x24>
      *Enum_Ref_Par = Ident_1;
 5a0:	0005a023          	sw	zero,0(a1)
 5a4:	00008067          	ret
      *Enum_Ref_Par = Ident_2;
 5a8:	00100793          	li	a5,1
 5ac:	00f5a023          	sw	a5,0(a1)
      break;
 5b0:	00008067          	ret
      *Enum_Ref_Par = Ident_3;
 5b4:	00f5a023          	sw	a5,0(a1)
} /* Proc_6 */
 5b8:	00008067          	ret

000005bc <Proc_7>:
  Int_Loc = Int_1_Par_Val + 2;
 5bc:	00250513          	addi	a0,a0,2
  *Int_Par_Ref = Int_2_Par_Val + Int_Loc;
 5c0:	00b50533          	add	a0,a0,a1
 5c4:	00a62023          	sw	a0,0(a2)
} /* Proc_7 */
 5c8:	00008067          	ret

000005cc <Proc_8>:
  Int_Loc = Int_1_Par_Val + 5;
 5cc:	00560713          	addi	a4,a2,5
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
 5d0:	00171793          	slli	a5,a4,0x1
 5d4:	00e787b3          	add	a5,a5,a4
 5d8:	00379793          	slli	a5,a5,0x3
 5dc:	00e787b3          	add	a5,a5,a4
 5e0:	00261613          	slli	a2,a2,0x2
  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
 5e4:	00271813          	slli	a6,a4,0x2
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
 5e8:	00379793          	slli	a5,a5,0x3
  Arr_1_Par_Ref [Int_Loc] = Int_2_Par_Val;
 5ec:	01050533          	add	a0,a0,a6
 5f0:	00f60833          	add	a6,a2,a5
 5f4:	00d52023          	sw	a3,0(a0)
  Arr_1_Par_Ref [Int_Loc+1] = Arr_1_Par_Ref [Int_Loc];
 5f8:	00d52223          	sw	a3,4(a0)
  Arr_1_Par_Ref [Int_Loc+30] = Int_Loc;
 5fc:	06e52c23          	sw	a4,120(a0)
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
 600:	010586b3          	add	a3,a1,a6
  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
 604:	0106a803          	lw	a6,16(a3)
    Arr_2_Par_Ref [Int_Loc] [Int_Index] = Int_Loc;
 608:	00e6aa23          	sw	a4,20(a3)
 60c:	00e6ac23          	sw	a4,24(a3)
  Arr_2_Par_Ref [Int_Loc] [Int_Loc-1] += 1;
 610:	00180713          	addi	a4,a6,1
 614:	00e6a823          	sw	a4,16(a3)
  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
 618:	00c585b3          	add	a1,a1,a2
 61c:	00052603          	lw	a2,0(a0)
 620:	00f585b3          	add	a1,a1,a5
 624:	000017b7          	lui	a5,0x1
 628:	00b787b3          	add	a5,a5,a1
  Int_Glob = 5;
 62c:	10002737          	lui	a4,0x10002
 630:	00500693          	li	a3,5
  Arr_2_Par_Ref [Int_Loc+20] [Int_Loc] = Arr_1_Par_Ref [Int_Loc];
 634:	fac7aa23          	sw	a2,-76(a5) # fb4 <_idata_start+0x868>
  Int_Glob = 5;
 638:	7ed72c23          	sw	a3,2040(a4) # 100027f8 <Int_Glob>
} /* Proc_8 */
 63c:	00008067          	ret

00000640 <Func_1>:
{
 640:	0ff57513          	zext.b	a0,a0
 644:	0ff5f593          	zext.b	a1,a1
  if (Ch_2_Loc != Ch_2_Par_Val)
 648:	00b50663          	beq	a0,a1,654 <Func_1+0x14>
    return (Ident_1);
 64c:	00000513          	li	a0,0
} /* Func_1 */
 650:	00008067          	ret
    Ch_1_Glob = Ch_1_Loc;
 654:	100027b7          	lui	a5,0x10002
 658:	7ea788a3          	sb	a0,2033(a5) # 100027f1 <Ch_1_Glob>
    return (Ident_2);
 65c:	00100513          	li	a0,1
 660:	00008067          	ret

00000664 <Func_2>:
{
 664:	ff010113          	addi	sp,sp,-16
 668:	00112623          	sw	ra,12(sp)
    if (Func_1 (Str_1_Par_Ref[Int_Loc],
 66c:	00254703          	lbu	a4,2(a0)
                Str_2_Par_Ref[Int_Loc+1]) == Ident_1)
 670:	0035c783          	lbu	a5,3(a1)
  if (Ch_2_Loc != Ch_2_Par_Val)
 674:	00f70063          	beq	a4,a5,674 <Func_2+0x10>
    if (strcmp (Str_1_Par_Ref, Str_2_Par_Ref) > 0)
 678:	a1dff0ef          	jal	94 <strcmp>
      return (false);
 67c:	00000793          	li	a5,0
    if (strcmp (Str_1_Par_Ref, Str_2_Par_Ref) > 0)
 680:	00a05a63          	blez	a0,694 <Func_2+0x30>
      Int_Glob = Int_Loc;
 684:	100027b7          	lui	a5,0x10002
 688:	00a00713          	li	a4,10
 68c:	7ee7ac23          	sw	a4,2040(a5) # 100027f8 <Int_Glob>
      return (true);
 690:	00100793          	li	a5,1
} /* Func_2 */
 694:	00c12083          	lw	ra,12(sp)
 698:	00078513          	mv	a0,a5
 69c:	01010113          	addi	sp,sp,16
 6a0:	00008067          	ret

000006a4 <Func_3>:
  if (Enum_Loc == Ident_3)
 6a4:	ffe50513          	addi	a0,a0,-2
    /* then, executed */
    return (true);
  else /* not executed */
    return (false);
 6a8:	00153513          	seqz	a0,a0
 6ac:	00008067          	ret
 6b0:	3130                	.insn	2, 0x3130
 6b2:	3332                	.insn	2, 0x3332
 6b4:	3534                	.insn	2, 0x3534
 6b6:	3736                	.insn	2, 0x3736
 6b8:	3938                	.insn	2, 0x3938
 6ba:	4241                	.insn	2, 0x4241
 6bc:	46454443          	.insn	4, 0x46454443
 6c0:	0000                	.insn	2, 0x
 6c2:	0000                	.insn	2, 0x
 6c4:	4844                	.insn	2, 0x4844
 6c6:	5952                	.insn	2, 0x5952
 6c8:	4e4f5453          	.insn	4, 0x4e4f5453
 6cc:	2045                	.insn	2, 0x2045
 6ce:	5250                	.insn	2, 0x5250
 6d0:	4152474f          	.insn	4, 0x4152474f
 6d4:	2c4d                	.insn	2, 0x2c4d
 6d6:	5320                	.insn	2, 0x5320
 6d8:	20454d4f          	.insn	4, 0x20454d4f
 6dc:	49525453          	.insn	4, 0x49525453
 6e0:	474e                	.insn	2, 0x474e
 6e2:	0000                	.insn	2, 0x
 6e4:	4844                	.insn	2, 0x4844
 6e6:	5952                	.insn	2, 0x5952
 6e8:	4e4f5453          	.insn	4, 0x4e4f5453
 6ec:	2045                	.insn	2, 0x2045
 6ee:	5250                	.insn	2, 0x5250
 6f0:	4152474f          	.insn	4, 0x4152474f
 6f4:	2c4d                	.insn	2, 0x2c4d
 6f6:	3120                	.insn	2, 0x3120
 6f8:	20545327          	.insn	4, 0x20545327
 6fc:	49525453          	.insn	4, 0x49525453
 700:	474e                	.insn	2, 0x474e
 702:	0000                	.insn	2, 0x
 704:	4844                	.insn	2, 0x4844
 706:	5952                	.insn	2, 0x5952
 708:	4e4f5453          	.insn	4, 0x4e4f5453
 70c:	2045                	.insn	2, 0x2045
 70e:	5250                	.insn	2, 0x5250
 710:	4152474f          	.insn	4, 0x4152474f
 714:	2c4d                	.insn	2, 0x2c4d
 716:	3220                	.insn	2, 0x3220
 718:	20444e27          	.insn	4, 0x20444e27
 71c:	49525453          	.insn	4, 0x49525453
 720:	474e                	.insn	2, 0x474e
 722:	0000                	.insn	2, 0x
 724:	4844                	.insn	2, 0x4844
 726:	5952                	.insn	2, 0x5952
 728:	4e4f5453          	.insn	4, 0x4e4f5453
 72c:	2045                	.insn	2, 0x2045
 72e:	5250                	.insn	2, 0x5250
 730:	4152474f          	.insn	4, 0x4152474f
 734:	2c4d                	.insn	2, 0x2c4d
 736:	3320                	.insn	2, 0x3320
 738:	20445227          	.insn	4, 0x20445227
 73c:	49525453          	.insn	4, 0x49525453
 740:	474e                	.insn	2, 0x474e
 742:	0000                	.insn	2, 0x
 744:	00000073          	ecall
 748:	0065                	.insn	2, 0x0065
	...
