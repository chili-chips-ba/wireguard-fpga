// ----------------------------------------------------------------------
// Auto-generated by sysrdl_cosim. *** DO NOT EDIT! ***
// Common WireGuard HAL header for both platform and co-simulation
//
// Copyright (C) 2025 Chili.CHIPS*ba
//
// ----------------------------------------------------------------------

#ifndef _CSR_BUILD_GENERATED_FILES_CSR_HW_H_ 
#define _CSR_BUILD_GENERATED_FILES_CSR_HW_H_

#include "csr.h"

#define WGMAIN          main

// -----------------------------------------------------
class imem_vp_t {
public:

    imem_vp_t(uint32_t* base_addr = (uint32_t*)0x0)
    {
    };

} ;

// -----------------------------------------------------
class dmem_vp_t {
public:

    dmem_vp_t(uint32_t* base_addr = (uint32_t*)0x10000000)
    {
    };

} ;

// -----------------------------------------------------
//
class csr__cpu_fifo__rx__data_31_0_vp_t {
public:
    csr__cpu_fifo__rx__data_31_0_vp_t (uint32_t* reg_addr = 0) : reg((csr__cpu_fifo__rx__data_31_0_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     tdata(const uint32_t data) {reg->f.tdata = data;};
    inline uint32_t tdata()                    {return reg->f.tdata;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__cpu_fifo__rx__data_31_0_t* reg;
};

// -----------------------------------------------------
//
class csr__cpu_fifo__rx__data_63_32_vp_t {
public:
    csr__cpu_fifo__rx__data_63_32_vp_t (uint32_t* reg_addr = 0) : reg((csr__cpu_fifo__rx__data_63_32_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     tdata(const uint32_t data) {reg->f.tdata = data;};
    inline uint32_t tdata()                    {return reg->f.tdata;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__cpu_fifo__rx__data_63_32_t* reg;
};

// -----------------------------------------------------
//
class csr__cpu_fifo__rx__data_95_64_vp_t {
public:
    csr__cpu_fifo__rx__data_95_64_vp_t (uint32_t* reg_addr = 0) : reg((csr__cpu_fifo__rx__data_95_64_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     tdata(const uint32_t data) {reg->f.tdata = data;};
    inline uint32_t tdata()                    {return reg->f.tdata;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__cpu_fifo__rx__data_95_64_t* reg;
};

// -----------------------------------------------------
//
class csr__cpu_fifo__rx__data_127_96_vp_t {
public:
    csr__cpu_fifo__rx__data_127_96_vp_t (uint32_t* reg_addr = 0) : reg((csr__cpu_fifo__rx__data_127_96_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     tdata(const uint32_t data) {reg->f.tdata = data;};
    inline uint32_t tdata()                    {return reg->f.tdata;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__cpu_fifo__rx__data_127_96_t* reg;
};

// -----------------------------------------------------
//
class csr__cpu_fifo__rx__control_vp_t {
public:
    csr__cpu_fifo__rx__control_vp_t (uint32_t* reg_addr = 0) : reg((csr__cpu_fifo__rx__control_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     tuser_dst(const uint32_t data) {reg->f.tuser_dst = data;};
    inline uint32_t tuser_dst()                    {return reg->f.tuser_dst;};
    inline void     tuser_src(const uint32_t data) {reg->f.tuser_src = data;};
    inline uint32_t tuser_src()                    {return reg->f.tuser_src;};
    inline void     tuser_bypass_stage(const uint32_t data) {reg->f.tuser_bypass_stage = data;};
    inline uint32_t tuser_bypass_stage()                    {return reg->f.tuser_bypass_stage;};
    inline void     tuser_bypass_all(const uint32_t data) {reg->f.tuser_bypass_all = data;};
    inline uint32_t tuser_bypass_all()                    {return reg->f.tuser_bypass_all;};
    inline void     tlast(const uint32_t data) {reg->f.tlast = data;};
    inline uint32_t tlast()                    {return reg->f.tlast;};
    inline void     tkeep(const uint32_t data) {reg->f.tkeep = data;};
    inline uint32_t tkeep()                    {return reg->f.tkeep;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__cpu_fifo__rx__control_t* reg;
};

// -----------------------------------------------------
//
class csr__cpu_fifo__rx__trigger_vp_t {
public:
    csr__cpu_fifo__rx__trigger_vp_t (uint32_t* reg_addr = 0) : reg((csr__cpu_fifo__rx__trigger_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     tvalid(const uint32_t data) {reg->f.tvalid = data;};
    inline uint32_t tvalid()                    {return reg->f.tvalid;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__cpu_fifo__rx__trigger_t* reg;
};

// -----------------------------------------------------
//
class csr__cpu_fifo__rx__status_vp_t {
public:
    csr__cpu_fifo__rx__status_vp_t (uint32_t* reg_addr = 0) : reg((csr__cpu_fifo__rx__status_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     tready(const uint32_t data) {reg->f.tready = data;};
    inline uint32_t tready()                    {return reg->f.tready;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__cpu_fifo__rx__status_t* reg;
};

// -----------------------------------------------------
class csr__cpu_fifo__rx_vp_t {
public:

    csr__cpu_fifo__rx_vp_t(uint32_t* base_addr)
    {
        data_31_0 = new csr__cpu_fifo__rx__data_31_0_vp_t (base_addr);
        data_63_32 = new csr__cpu_fifo__rx__data_63_32_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo__rx__data_31_0_t)/4
                                                                                    );
        data_95_64 = new csr__cpu_fifo__rx__data_95_64_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo__rx__data_31_0_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__rx__data_63_32_t)/4
                                                                                    );
        data_127_96 = new csr__cpu_fifo__rx__data_127_96_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo__rx__data_31_0_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__rx__data_63_32_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__rx__data_95_64_t)/4
                                                                                    );
        control = new csr__cpu_fifo__rx__control_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo__rx__data_31_0_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__rx__data_63_32_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__rx__data_95_64_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__rx__data_127_96_t)/4
                                                                                    );
        trigger = new csr__cpu_fifo__rx__trigger_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo__rx__data_31_0_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__rx__data_63_32_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__rx__data_95_64_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__rx__data_127_96_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__rx__control_t)/4
                                                                                    );
        status = new csr__cpu_fifo__rx__status_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo__rx__data_31_0_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__rx__data_63_32_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__rx__data_95_64_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__rx__data_127_96_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__rx__control_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__rx__trigger_t)/4
                                                                                    );
    };

    csr__cpu_fifo__rx__data_31_0_vp_t* data_31_0;
    csr__cpu_fifo__rx__data_63_32_vp_t* data_63_32;
    csr__cpu_fifo__rx__data_95_64_vp_t* data_95_64;
    csr__cpu_fifo__rx__data_127_96_vp_t* data_127_96;
    csr__cpu_fifo__rx__control_vp_t* control;
    csr__cpu_fifo__rx__trigger_vp_t* trigger;
    csr__cpu_fifo__rx__status_vp_t* status;
} ;

// -----------------------------------------------------
//
class csr__cpu_fifo__tx__data_31_0_vp_t {
public:
    csr__cpu_fifo__tx__data_31_0_vp_t (uint32_t* reg_addr = 0) : reg((csr__cpu_fifo__tx__data_31_0_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     tdata(const uint32_t data) {reg->f.tdata = data;};
    inline uint32_t tdata()                    {return reg->f.tdata;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__cpu_fifo__tx__data_31_0_t* reg;
};

// -----------------------------------------------------
//
class csr__cpu_fifo__tx__data_63_32_vp_t {
public:
    csr__cpu_fifo__tx__data_63_32_vp_t (uint32_t* reg_addr = 0) : reg((csr__cpu_fifo__tx__data_63_32_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     tdata(const uint32_t data) {reg->f.tdata = data;};
    inline uint32_t tdata()                    {return reg->f.tdata;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__cpu_fifo__tx__data_63_32_t* reg;
};

// -----------------------------------------------------
//
class csr__cpu_fifo__tx__data_95_64_vp_t {
public:
    csr__cpu_fifo__tx__data_95_64_vp_t (uint32_t* reg_addr = 0) : reg((csr__cpu_fifo__tx__data_95_64_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     tdata(const uint32_t data) {reg->f.tdata = data;};
    inline uint32_t tdata()                    {return reg->f.tdata;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__cpu_fifo__tx__data_95_64_t* reg;
};

// -----------------------------------------------------
//
class csr__cpu_fifo__tx__data_127_96_vp_t {
public:
    csr__cpu_fifo__tx__data_127_96_vp_t (uint32_t* reg_addr = 0) : reg((csr__cpu_fifo__tx__data_127_96_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     tdata(const uint32_t data) {reg->f.tdata = data;};
    inline uint32_t tdata()                    {return reg->f.tdata;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__cpu_fifo__tx__data_127_96_t* reg;
};

// -----------------------------------------------------
//
class csr__cpu_fifo__tx__control_vp_t {
public:
    csr__cpu_fifo__tx__control_vp_t (uint32_t* reg_addr = 0) : reg((csr__cpu_fifo__tx__control_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     tuser_dst(const uint32_t data) {reg->f.tuser_dst = data;};
    inline uint32_t tuser_dst()                    {return reg->f.tuser_dst;};
    inline void     tuser_src(const uint32_t data) {reg->f.tuser_src = data;};
    inline uint32_t tuser_src()                    {return reg->f.tuser_src;};
    inline void     tuser_bypass_stage(const uint32_t data) {reg->f.tuser_bypass_stage = data;};
    inline uint32_t tuser_bypass_stage()                    {return reg->f.tuser_bypass_stage;};
    inline void     tuser_bypass_all(const uint32_t data) {reg->f.tuser_bypass_all = data;};
    inline uint32_t tuser_bypass_all()                    {return reg->f.tuser_bypass_all;};
    inline void     tlast(const uint32_t data) {reg->f.tlast = data;};
    inline uint32_t tlast()                    {return reg->f.tlast;};
    inline void     tkeep(const uint32_t data) {reg->f.tkeep = data;};
    inline uint32_t tkeep()                    {return reg->f.tkeep;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__cpu_fifo__tx__control_t* reg;
};

// -----------------------------------------------------
//
class csr__cpu_fifo__tx__trigger_vp_t {
public:
    csr__cpu_fifo__tx__trigger_vp_t (uint32_t* reg_addr = 0) : reg((csr__cpu_fifo__tx__trigger_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     tready(const uint32_t data) {reg->f.tready = data;};
    inline uint32_t tready()                    {return reg->f.tready;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__cpu_fifo__tx__trigger_t* reg;
};

// -----------------------------------------------------
//
class csr__cpu_fifo__tx__status_vp_t {
public:
    csr__cpu_fifo__tx__status_vp_t (uint32_t* reg_addr = 0) : reg((csr__cpu_fifo__tx__status_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     tvalid(const uint32_t data) {reg->f.tvalid = data;};
    inline uint32_t tvalid()                    {return reg->f.tvalid;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__cpu_fifo__tx__status_t* reg;
};

// -----------------------------------------------------
class csr__cpu_fifo__tx_vp_t {
public:

    csr__cpu_fifo__tx_vp_t(uint32_t* base_addr)
    {
        data_31_0 = new csr__cpu_fifo__tx__data_31_0_vp_t (base_addr);
        data_63_32 = new csr__cpu_fifo__tx__data_63_32_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo__tx__data_31_0_t)/4
                                                                                    );
        data_95_64 = new csr__cpu_fifo__tx__data_95_64_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo__tx__data_31_0_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__tx__data_63_32_t)/4
                                                                                    );
        data_127_96 = new csr__cpu_fifo__tx__data_127_96_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo__tx__data_31_0_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__tx__data_63_32_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__tx__data_95_64_t)/4
                                                                                    );
        control = new csr__cpu_fifo__tx__control_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo__tx__data_31_0_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__tx__data_63_32_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__tx__data_95_64_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__tx__data_127_96_t)/4
                                                                                    );
        trigger = new csr__cpu_fifo__tx__trigger_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo__tx__data_31_0_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__tx__data_63_32_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__tx__data_95_64_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__tx__data_127_96_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__tx__control_t)/4
                                                                                    );
        status = new csr__cpu_fifo__tx__status_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo__tx__data_31_0_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__tx__data_63_32_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__tx__data_95_64_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__tx__data_127_96_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__tx__control_t)/4 + 
                                                                                   sizeof(csr__cpu_fifo__tx__trigger_t)/4
                                                                                    );
    };

    csr__cpu_fifo__tx__data_31_0_vp_t* data_31_0;
    csr__cpu_fifo__tx__data_63_32_vp_t* data_63_32;
    csr__cpu_fifo__tx__data_95_64_vp_t* data_95_64;
    csr__cpu_fifo__tx__data_127_96_vp_t* data_127_96;
    csr__cpu_fifo__tx__control_vp_t* control;
    csr__cpu_fifo__tx__trigger_vp_t* trigger;
    csr__cpu_fifo__tx__status_vp_t* status;
} ;

// -----------------------------------------------------
class csr__cpu_fifo_vp_t {
public:

    csr__cpu_fifo_vp_t(uint32_t* base_addr)
    {
        rx = new csr__cpu_fifo__rx_vp_t (base_addr);
        tx = new csr__cpu_fifo__tx_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo__rx_t)/4
                                                                                    );
    };

    csr__cpu_fifo__rx_vp_t* rx;
    csr__cpu_fifo__tx_vp_t* tx;
} ;

// -----------------------------------------------------
//
class csr__uart__rx_vp_t {
public:
    csr__uart__rx_vp_t (uint32_t* reg_addr = 0) : reg((csr__uart__rx_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     data(const uint32_t data) {reg->f.data = data;};
    inline uint32_t data()                    {return reg->f.data;};
    inline void     oflow(const uint32_t data) {reg->f.oflow = data;};
    inline uint32_t oflow()                    {return reg->f.oflow;};
    inline void     valid(const uint32_t data) {reg->f.valid = data;};
    inline uint32_t valid()                    {return reg->f.valid;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__uart__rx_t* reg;
};

// -----------------------------------------------------
//
class csr__uart__rx_trigger_read_2925067f_vp_t {
public:
    csr__uart__rx_trigger_read_2925067f_vp_t (uint32_t* reg_addr = 0) : reg((csr__uart__rx_trigger_read_2925067f_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     read(const uint32_t data) {reg->f.read = data;};
    inline uint32_t read()                    {return reg->f.read;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__uart__rx_trigger_read_2925067f_t* reg;
};

// -----------------------------------------------------
//
class csr__uart__tx_vp_t {
public:
    csr__uart__tx_vp_t (uint32_t* reg_addr = 0) : reg((csr__uart__tx_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     data(const uint32_t data) {reg->f.data = data;};
    inline uint32_t data()                    {return reg->f.data;};
    inline void     busy(const uint32_t data) {reg->f.busy = data;};
    inline uint32_t busy()                    {return reg->f.busy;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__uart__tx_t* reg;
};

// -----------------------------------------------------
//
class csr__uart__tx_trigger_write_d2a2fe0e_vp_t {
public:
    csr__uart__tx_trigger_write_d2a2fe0e_vp_t (uint32_t* reg_addr = 0) : reg((csr__uart__tx_trigger_write_d2a2fe0e_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     write(const uint32_t data) {reg->f.write = data;};
    inline uint32_t write()                    {return reg->f.write;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__uart__tx_trigger_write_d2a2fe0e_t* reg;
};

// -----------------------------------------------------
class csr__uart_vp_t {
public:

    csr__uart_vp_t(uint32_t* base_addr)
    {
        rx = new csr__uart__rx_vp_t (base_addr);
        rx_trigger = new csr__uart__rx_trigger_read_2925067f_vp_t (base_addr +
                                                                                   sizeof(csr__uart__rx_t)/4
                                                                                    );
        tx = new csr__uart__tx_vp_t (base_addr +
                                                                                   sizeof(csr__uart__rx_t)/4 + 
                                                                                   sizeof(csr__uart__rx_trigger_read_2925067f_t)/4
                                                                                    );
        tx_trigger = new csr__uart__tx_trigger_write_d2a2fe0e_vp_t (base_addr +
                                                                                   sizeof(csr__uart__rx_t)/4 + 
                                                                                   sizeof(csr__uart__rx_trigger_read_2925067f_t)/4 + 
                                                                                   sizeof(csr__uart__tx_t)/4
                                                                                    );
    };

    csr__uart__rx_vp_t* rx;
    csr__uart__rx_trigger_read_2925067f_vp_t* rx_trigger;
    csr__uart__tx_vp_t* tx;
    csr__uart__tx_trigger_write_d2a2fe0e_vp_t* tx_trigger;
} ;

// -----------------------------------------------------
//
class csr__gpio_vp_t {
public:
    csr__gpio_vp_t (uint32_t* reg_addr = 0) : reg((csr__gpio_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     key1(const uint32_t data) {reg->f.key1 = data;};
    inline uint32_t key1()                    {return reg->f.key1;};
    inline void     key2(const uint32_t data) {reg->f.key2 = data;};
    inline uint32_t key2()                    {return reg->f.key2;};
    inline void     led1(const uint32_t data) {reg->f.led1 = data;};
    inline uint32_t led1()                    {return reg->f.led1;};
    inline void     led2(const uint32_t data) {reg->f.led2 = data;};
    inline uint32_t led2()                    {return reg->f.led2;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__gpio_t* reg;
};

// -----------------------------------------------------
//
class csr__ethernet__status_vp_t {
public:
    csr__ethernet__status_vp_t (uint32_t* reg_addr = 0) : reg((csr__ethernet__status_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     speed(const uint32_t data) {reg->f.speed = data;};
    inline uint32_t speed()                    {return reg->f.speed;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__ethernet__status_t* reg;
};

// -----------------------------------------------------
class csr__ethernet_vp_t {
public:

    csr__ethernet_vp_t(uint32_t* base_addr)
    {
        status = new csr__ethernet__status_vp_t (base_addr);
    };

    csr__ethernet__status_vp_t* status;
} ;

// -----------------------------------------------------
//
class csr__dpe__fcr_vp_t {
public:
    csr__dpe__fcr_vp_t (uint32_t* reg_addr = 0) : reg((csr__dpe__fcr_t*)reg_addr) {};

    inline void     full(const uint32_t data) {reg->w = data;};
    inline uint32_t full()                    {return reg->w;};

    inline void     idle(const uint32_t data) {reg->f.idle = data;};
    inline uint32_t idle()                    {return reg->f.idle;};
    inline void     pause(const uint32_t data) {reg->f.pause = data;};
    inline uint32_t pause()                    {return reg->f.pause;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__dpe__fcr_t* reg;
};

// -----------------------------------------------------
class csr__dpe_vp_t {
public:

    csr__dpe_vp_t(uint32_t* base_addr)
    {
        fcr = new csr__dpe__fcr_vp_t (base_addr);
    };

    csr__dpe__fcr_vp_t* fcr;
} ;

// -----------------------------------------------------
//
class csr__hwid_vp_t {
public:
    csr__hwid_vp_t (uint32_t* reg_addr = 0) : reg((csr__hwid_t*)reg_addr) {};

    inline void     full(const uint64_t data) {reg->w = data;};
    inline uint64_t full()                    {return reg->w;};

    inline void     RELEASE(const uint64_t data) {reg->f.RELEASE = data;};
    inline uint64_t RELEASE()                    {return reg->f.RELEASE;};
    inline void     VERSION(const uint64_t data) {reg->f.VERSION = data;};
    inline uint64_t VERSION()                    {return reg->f.VERSION;};
    inline void     PID(const uint64_t data) {reg->f.PID = data;};
    inline uint64_t PID()                    {return reg->f.PID;};
    inline void     VID(const uint64_t data) {reg->f.VID = data;};
    inline uint64_t VID()                    {return reg->f.VID;};

    inline uint32_t* get_addr() {return (uint32_t*)((uint64_t)reg);}

private:
    csr__hwid_t* reg;
};

// -----------------------------------------------------
class csr_vp_t {
public:

    csr_vp_t(uint32_t* base_addr = (uint32_t*)0x20000000)
    {
        cpu_fifo = new csr__cpu_fifo_vp_t (base_addr);
        uart = new csr__uart_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo_t)/4
                                                                                    );
        gpio = new csr__gpio_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo_t)/4 + 
                                                                                   sizeof(csr__uart_t)/4
                                                                                    );
        for(int idx = 0; idx < 4; idx++)
        {
            ethernet[idx] = new csr__ethernet_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo_t)/4 +
                                                                                   sizeof(csr__uart_t)/4 +
                                                                                   sizeof(csr__gpio_t)/4 +
                                                                                   idx * sizeof(csr__ethernet_t)/4);
        };

        dpe = new csr__dpe_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo_t)/4 + 
                                                                                   sizeof(csr__uart_t)/4 + 
                                                                                   sizeof(csr__gpio_t)/4 + 
                                                                                   4*sizeof(csr__ethernet_t)/4
                                                                                    );
        hwid = new csr__hwid_vp_t (base_addr +
                                                                                   sizeof(csr__cpu_fifo_t)/4 + 
                                                                                   sizeof(csr__uart_t)/4 + 
                                                                                   sizeof(csr__gpio_t)/4 + 
                                                                                   4*sizeof(csr__ethernet_t)/4 + 
                                                                                   sizeof(csr__dpe_t)/4
                                                                                    );
    };

    csr__cpu_fifo_vp_t* cpu_fifo;
    csr__uart_vp_t* uart;
    csr__gpio_vp_t* gpio;
    csr__ethernet_vp_t* ethernet[4];
    csr__dpe_vp_t* dpe;
    csr__hwid_vp_t* hwid;
} ;


#endif
